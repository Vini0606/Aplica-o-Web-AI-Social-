import os
from dotenv import load_dotenv
from langchain_openai import ChatOpenAI
from langchain.chains import ConversationChain
from langchain.memory import ConversationBufferMemory
from langchain.prompts import PromptTemplate
from langchain_ollama import ChatOllama
from langchain_groq import ChatGroq

# Adicionamos a importa√ß√£o da exce√ß√£o
from langchain_core.exceptions import OutputParserException

# Carrega as vari√°veis de ambiente (sua chave da API)
load_dotenv()

def preencher_briefing():

    # --- 1. MODELO DE LINGUAGEM ---
    # Inicializa o modelo de linguagem que ser√° o c√©rebro do nosso chatbot.
    # O `temperature=0.7` permite um equil√≠brio entre respostas criativas e consistentes.
    llm = ChatGroq(model="gemma2-9b-it", temperature=0.4)

    # --- 2. PERGUNTAS DO BRIEFING ---
    # Todas as perguntas que o agente deve fazer.
    questions = """
            1. Qual √© o nome da sua empresa?
            2. Descreva em poucas palavras o que sua empresa faz e qual problema ela resolve.
            3. Quais s√£o os valores e a personalidade da sua marca? (Ex: Jovem e descolada, s√©ria e confi√°vel, sofisticada e exclusiva?)
            4. Como voc√™ espera que a sua empresa seja percebida pelo seu p√∫blico?
            5. Descreva todos os produtos e/ou servi√ßos da sua empresa detalhadamente.
            6. Quais s√£o os principais produtos ou servi√ßos que voc√™ deseja promover nas redes sociais?
            7. Quem s√£o seus principais concorrentes diretos e indiretos?
            8. Quem √© o seu cliente ideal? (Descreva um perfil geral)
            9. Qual a faixa de idade do seu p√∫blico ideal? (Exemplo: 15 aos 30 anos)
            10. Qual o g√™nero predominante do seu p√∫blico ideal?
            11. Onde seu p√∫blico ideal mora, trabalha ou frequenta? (Exemplo: S√£o Paulo Capital, Bairros X, Y e Z.)
            12. Quais s√£o os principais interesses do seu cliente ideal?
            13. Qual a faixa de renda aproximada do seu cliente ideal? (Exemplo: At√© 2 sal√°rios m√≠nimos, Acima de R$ 10.000)
            14. Quais s√£o as principais dores, necessidades e desejos desse p√∫blico?
            15. Qual √© o principal objetivo com a gest√£o de redes sociais? (Ex: Aumentar o reconhecimento da marca, gerar leads, aumentar as vendas, criar uma comunidade?)
            16. Voc√™ tem alguma meta espec√≠fica em mente? (Ex: Atingir 10.000 seguidores em 6 meses, gerar 50 leads por m√™s?)
            17. Qual √© o resultado esperado que ir√° justificar seu investimento na estrat√©gia?
            18. Em quais redes sociais voc√™ acredita que seu p√∫blico est√° mais ativo?
            19. Que tipo de conte√∫do voc√™ gostaria de ver nas suas redes sociais? (Ex: Dicas, bastidores, promo√ß√µes, v√≠deos, artigos?)
            20. Qual √© o tom de voz que devemos usar? (Ex: Formal, informal, engra√ßado, educativo?)
            21. Existe algum assunto ou abordagem que voc√™ gostaria de EVITAR?
            22. Voc√™ j√° possui algum material de marketing que possamos usar? (Ex: Fotos, v√≠deos, logo, manual da marca?)
            23. Existe mais alguma informa√ß√£o crucial que voc√™ acha que eu deveria saber
    """

    # --- 3. PROMPT E CADEIA DE CONVERSA√á√ÉO ---
    # O template de prompt define a personalidade e as instru√ß√µes para o agente.
    template_conversation = f"""
    Voc√™ √© um especialista em social media simp√°tico e profissional. Sua tarefa √© conduzir um briefing completo com um novo cliente.
    Fa√ßa as perguntas da lista abaixo, UMA DE CADA VEZ E NA ORDEM EM QUE APARECEM. Espere o cliente responder antes de passar para a pr√≥xima.
    Seja natural e conversacional. Comece se apresentando e explicando o processo. Gere o m√°ximo de elogios que consguir.

    Lista de Perguntas:
    {questions}

    Quando tiver feito todas as perguntas, ou se o cliente disser que terminou, agrade√ßa e se despe√ßa.

    Hist√≥rico da Conversa:
    {{history}}

    Cliente: {{input}}
    Assistente de IA:
    """

    PROMPT_CONVERSATION = PromptTemplate(
        input_variables=["history", "input", "questions"], 
        template=template_conversation
    )

    # A ConversationChain orquestra o LLM, a Mem√≥ria e o Prompt.
    conversation_chain = ConversationChain(
        llm=llm,
        memory=ConversationBufferMemory(),
        prompt=PROMPT_CONVERSATION,
        verbose=False # Mude para True para ver os detalhes do processo no terminal
    )

    # --- 4. FUN√á√ÉO PRINCIPAL DO CHAT ---
    def start_briefing_chat():
        """Inicia o loop de conversa√ß√£o com o cliente."""
        print("ü§ñ Assistente de IA: Ol√°! Sou seu assistente de IA para m√≠dias sociais.")
        print("ü§ñ Assistente de IA: Vamos come√ßar seu briefing? Vou fazer algumas perguntas para entender melhor seu neg√≥cio.")
        print("ü§ñ Assistente de IA: Ao final, quando estiver satisfeito, apenas digite 'fim' ou 'concluir'.\n")

        # Injeta a lista de perguntas no in√≠cio da conversa
        conversation_chain.predict(input=f"Aqui est√° a lista de perguntas que preciso que voc√™ me fa√ßa: {questions}")

        # Primeira pergunta real para o cliente
        initial_response = conversation_chain.predict(input="√ìtimo, pode come√ßar com a primeira pergunta.")
        print(f"ü§ñ Assistente de IA: {initial_response}\n")

        while True:
            user_input = input("üë§ Voc√™: ")
            if user_input.lower() in ["fim", "concluir", "finalizar"]:
                print("\nü§ñ Assistente de IA: Entendido! Briefing conclu√≠do. Muito obrigado pelas respostas.")
                print("ü§ñ Assistente de IA: Estou gerando o arquivo Markdown com o resumo. Um momento...")
                break
            
            ai_response = conversation_chain.predict(input=user_input)
            print(f"\nü§ñ Assistente de IA: {ai_response}\n")
        
        return conversation_chain.memory

    # --- 5. FUN√á√ÉO PARA GERAR O ARQUIVO MARKDOWN ---
    def generate_markdown_file(memory):
        """Pega o hist√≥rico da mem√≥ria e formata em um arquivo .md."""
        
        # Extrai o hist√≥rico completo da conversa
        history = memory.load_memory_variables({})["history"]
        
        # Template de prompt para a tarefa de sumariza√ß√£o e formata√ß√£o
        template_formatter = """
        Sua tarefa √© analisar o hist√≥rico de uma conversa de briefing entre um assistente de IA e um cliente.
        Extraia as perguntas ORIGINAIS da lista e as respostas do cliente correspondentes.
        Formate a sa√≠da EXCLUSIVAMENTE em Markdown, seguindo este modelo:

        # Briefing de Social Media

        ## Sobre a Empresa e Marca

        **1. Pergunta Original...**
        *Resposta:* Resposta do cliente.

        **2. Pergunta Original...**
        *Resposta:* Resposta do cliente.

        ...e assim por diante para todas as categorias e perguntas. Ignore sauda√ß√µes, despedidas e conversas informais.
        Se uma pergunta n√£o foi claramente respondida, escreva "Resposta n√£o fornecida.".

        Hist√≥rico da Conversa para An√°lise:
        {chat_history}
        """
        
        PROMPT_FORMATTER = PromptTemplate(input_variables=["chat_history"], template=template_formatter)
        
        # Cria uma cadeia simples apenas para esta tarefa de formata√ß√£o
        formatter_chain = PROMPT_FORMATTER | llm
        
        markdown_output = formatter_chain.invoke({"chat_history": history}).content
            
        print(f"‚úÖ Arquivo Markdown gerado com sucesso!")

        return markdown_output

    final_memory = start_briefing_chat()
    markdown_output = generate_markdown_file(final_memory)

    return markdown_output

# --- EXECU√á√ÉO ---
if __name__ == "__main__":
    
    preencher_briefing()